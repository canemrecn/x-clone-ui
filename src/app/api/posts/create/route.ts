// src/app/api/posts/create/route.ts
/*
Bu dosya, kullanÄ±cÄ±larÄ±n yeni bir gÃ¶nderi (metin, medya veya her ikisi) oluÅŸturmasÄ±nÄ± saÄŸlayan
bir API endpointâ€™idir. JWT token ile kullanÄ±cÄ±nÄ±n kimliÄŸi doÄŸrulandÄ±ktan sonra gelen iÃ§erik,
medya bilgileri, dil ve kategori bilgileriyle birlikte posts tablosuna gÃ¼venli bir ÅŸekilde kaydedilir.
Ä°Ã§erik metni yoksa varsayÄ±lan olarak "Undergo" atanÄ±r.
GÃ¶nderi baÅŸarÄ±yla oluÅŸturulursa 201 yanÄ±tÄ± dÃ¶ner, aksi halde hata mesajÄ± ile 500 dÃ¶ner.
*/

import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import jwt from "jsonwebtoken";
import { db } from "@/lib/db";

// Uygunsuz iÃ§erik kontrol listesi
const forbiddenWords = [
  "orospu", "piÃ§", "ÅŸerefsiz", "kahpe", "pezevenk", "yarrak", "am", "amcÄ±k",
  "gÃ¶t", "ananÄ±", "sikeyim", "siktir", "kaltak", "ibne", "top", "kaÅŸar",
  "aptal", "salak", "gerizekalÄ±", "geri zekalÄ±", "mal", "beyinsiz", "dangalak", "embesil",
  "Ã¶ldÃ¼r", "gebertirim", "vururum", "kan kustururum", "keserim", "boÄŸarÄ±m", "yakarÄ±m",
  "terÃ¶rist", "bomba", "patlat", "silah", "kurÅŸun", "katliam", "cinayet", "kanlÄ±",
  "fuck", "shit", "bitch", "asshole", "dick", "pussy", "slut", "whore", "rape", "kill",
  // Listeyi istersen daha da uzatabiliriz
];

// Metinde uygunsuz iÃ§erik tespiti
function detectInappropriate(text: string): string | null {
  const lower = text.toLowerCase();
  return forbiddenWords.find((word) => lower.includes(word)) || null;
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { content, media_url, media_type, isReel, lang, category_id } = body;

    const cookieStore =await cookies();
    const token = cookieStore.get("token")?.value;

    if (!token) {
      return NextResponse.json({ message: "Authentication required" }, { status: 401 });
    }

    if (!content && !media_url) {
      return NextResponse.json({ message: "Content or media is required" }, { status: 400 });
    }

    const secret = process.env.JWT_SECRET;
    if (!secret) {
      throw new Error("JWT_SECRET is not defined in environment variables");
    }

    const decoded = jwt.verify(token, secret) as { id: number };
    const user_id = decoded.id;
    const postLang = lang?.toString().trim() || "en";
    const categoryId = Number(category_id) || 1;
    const title = "GÃ¶nderiyi GÃ¶ster";

    // AI filtresiyle iÃ§erik kontrolÃ¼
    const matchedWord = detectInappropriate(content || "") || detectInappropriate(media_url || "");
    if (matchedWord) {
      const [pendingResult] = await db.query(
        `INSERT INTO pending_posts (user_id, content, media_url, media_type, is_reel, lang, status)
         VALUES (?, ?, ?, ?, ?, ?, 'pending')`,
        [
          user_id,
          content || "Undergo",
          media_url,
          media_type,
          isReel ? 1 : 0,
          postLang,
        ]
      );

      await db.query(
        `INSERT INTO user_warnings (user_id, reason, triggered_by, severity)
         VALUES (?, ?, 'ai', 'high')`,
        [user_id, `Uygunsuz iÃ§erik algÄ±landÄ±: ${matchedWord}`]
      );

      return NextResponse.json(
        { message: "GÃ¶nderi AI filtresine takÄ±ldÄ±, admin onayÄ± bekliyor." },
        { status: 202 }
      );
    }

    // GÃ¶nderi kaydÄ±
    const [postResult] = await db.query(
      `INSERT INTO posts (user_id, category_id, title, content, media_url, media_type, is_reel, lang)
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        user_id,
        categoryId,
        title,
        content || "Undergo",
        media_url,
        media_type,
        isReel ? 1 : 0,
        postLang,
      ]
    );

    const ip = request.headers.get("x-forwarded-for") || "localhost";
    const userAgent = request.headers.get("user-agent") || "unknown";

    await db.query(
      `INSERT INTO activity_logs (user_id, action, details, ip_address, user_agent)
       VALUES (?, ?, ?, ?, ?)`,
      [
        user_id,
        "post_created",
        `Post ID: ${(postResult as any).insertId}`,
        ip,
        userAgent,
      ]
    );

    return NextResponse.json({ message: "Post created successfully" }, { status: 201 });
  } catch (error: any) {
    console.error("ðŸš¨ Post Creation Error:", error);
    return NextResponse.json(
      { message: "Database error", error: error.message },
      { status: 500 }
    );
  }
}
